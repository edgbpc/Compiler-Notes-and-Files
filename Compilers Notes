
/*Compilers - Week 1 Wednesday

All homework due 6:55 PM on due date
Will discuss project and quiz next class period
Submitted on Canvas

Projects submitted on delmar
Projects due at 11:59 on due date
Include README
Can use C/C++

Programming Standards
- generally applies to C, C++, Java, etc
- see file on Programming Standards on Canvas

assignment vs operator
operator - creates an expression
  expressions have types, values and evaluates


  y = 1
  x = y = 3 //only compiles of assignment in an operator


  assignment is associative.  evaluates left to right


Week 2 - Monday 1/28

Modules provide information for entire project (headers)
Sources implement headers
headers - information provided "what is exported".  information about the functions, variables, etc


seperate source files always compiled one at a time

source -> preprocessor (everything with # processed (ex - #include stdio.h, macros) 
telling compiler that using elements (information from the library) from stdio not the actual library; library linked later

on delmar 

gcc -E *.c > y.i will produce the preprocessor file and redirect to file

... = variable number of parameters

compiler uses the .i file - - on delmar, .i not created as a file unless specified by -E, otherwise, gcc will continue to compile


Linker - connects multiple compiled files into a single executable.  Ex - connects printf in source to the implementation in the library (external linkage)

most errors come from the compiler - syntax, undefined variables
: undefined reference to 'printff'
Linker error - collect2: error: ld returned 1 exit status (ld is linker error)

if no main - shell cannot start the program.  cannot call main as a function

internal linkage - idea to prevent linker from connecting header info to other modules 
	a helper function defined in source but not in the header, is hidden from the linker and only available to that source in which it was defined

define the helper with static inside the source that needs to use the helper.  





for each source, 1 header file.

** possible error - including same header info more then once

prevention:

assume filename.h

#ifndef FILENAME_H // if not defined
#define FILENAME_H //then define

// content

#endef


REVIEW FLOATING POINT REPRESENTATION VS INTEGAR REPRESENTATION

In a 8 bit number, the first 4 of bits of floating point =/= the 4 bits of an integer number


PROJECT 0 -

ctrl+d to simulate end of file

Standard template library. (Stl)

c++ strings


Abstract syntax tree

Adam ala ada Jim ala Susan George Georg john



0		4: Adam
		   john
1	3: Ala		5: Susan
	   Ada		   Georg
	   Jim
2				6: George


Print preorder traversal - visit node, process node before traveling left, then down (if nothing left or right returns up a node and checks right)
4 Adam John				4 - root
 3 Ala Ada Jim				3 - child of root, has no children
 5 Susan Georg				5 - child of root, has a child 6
   6 George


MUST USE FUNCTION NAMES IN ASSIGNMENTS

Write program to only read from file

If keyboard input, take input from keyboard and save to file then read file

If redirection -  //name of program is 1st argument argc =1
Int main(int argc, char * argv[]){

//process # of argument
If argc > 2  //error too many arguments

If argc == 2  {//file basename given
	string base = argv[1]
	base += ".sp19"

	FILE *fp = fopen(base, "r")
	//test if not successfully open
}

If argc == 1 {//keyboard or the redirection
	fp = stdin

}
String data

Fscanf(fp, "%s", data)  //fp is file pointer either from the file or the keyboard, but doesn't matter


}

Monday 2/4

reviewed basic introductions to languages

semantics - process data by the rules and assignment by rules

programming languages evolved with restrictions.  natural lanaguages did not
4 categories of laguages

type 3 -> regular, linear expressions: algorithms
type 2 -> context free: BNF
type 1 -> difficult to write algorithms, static semantics
type 0 -> turing machines, algorithm that cannot be built.  won't write languages for this level


type 2 and 3 is where we write programming languages
compontents of languages written in type 2 and then others considered case-by-case

https://drona.csa.iisc.ac.in/~deepakd/atc-2013/seminars/presentation_1.pdf











